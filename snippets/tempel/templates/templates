;; -*- mode: emacs-lisp -*-

emacs-lisp-mode

(alphanumeric_0-9A-Za-z     "[:alnum:]")
(alphabetic_A-Za-z          "[:alpha:]")
(ascii_\x00-\x7F            "[:ascii:]")
(blank_\tspace              "[:blank:]")
(control_\x00-\x1F\x7F      "[:cntrl:]")
(digits_0-9                 "[:digit:]")
(graphical_!-~              "[:graph:]")
(lower_case_a-z             "[:lower:]")
(printable_ -~              "[:print:]")
(punctuation_!-/:-@etc.     "[:punct:]")
(whitespace_\t\n\v\f\r      "[:space:]")
(upper_case_A-Z             "[:upper:]")
(word_characters_0-9A-Za-z_ "[:word:]")
(hex_digit_0-9A-Fa-f        "[:xdigit:]")

emacs-lisp-mode

(autoload ";;;###autoload")
(pt "(point)")
(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(iflet* "(if-let* (" p ")" n> r> ")")
(whenlet* "(when-let* (" p ")" n> r> ")")
(andlet* "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
        "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name))) " ends here" n)

latex-mode yatex-mode org-mode
(begin "\\begin{" (s env) "}" r> n> "\\end{" (s env) "}")
(frac "\\frac{" p "}{" q "}")
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")
(combination "{}_" p " \\mathrm{C}_" p)
(paren-big "\\left(" r "\\right)")
(cancel "\\cancel{" r "}")
(SI単位 "\\SI{" p "}{" p "}")
(sum "\\sum_{" p "}^{" p "}")
(∩ "\\cap")
(∪ "\\cup")
(× "\\times")
(以下である-less "\\leq")
(∈ "\\in")
(自然数Z "\\mathbb{Z}")
(長い右向きの中抜き矢印 "\\Longrightarrow")

rustic-mode

(deri "#[derive(" (p "TRAIT") ")]")
(strc "struct " (p "NAME") "{" n> r n> "}")
(doce "/// Errors" n "/// " p)
(blockdoc "/**" n> p n> "*/")
(generalresult "Result<" p ", Box<dyn std::error::Error + Send + Sync + 'static>>" q)


text-mode

(cut "--8<---------------cut here---------------start------------->8---" n r n
     "--8<---------------cut here---------------end--------------->8---" n)
(asciibox "+-" (make-string (length str) ?-) "-+" n
          "| " (s str)                       " |" n
          "+-" (make-string (length str) ?-) "-+" n)
(rot13 (p "plain text" text) n "----" n (rot13 text))
(calc (p "taylor(sin(x),x=0,3)" formula) n "----" n (format "%s" (calc-eval formula)))

mermaid-mode

(text-on-open-link (p "start") "---|" (p "label") "|" (p "terminal"))
(flowchart "flowchart " (p "TD or LR") n>)
(classDiagram "classDiagram" n>)
(関連 (p "ClassA") " -- " (p "ClassB") " : " (p "label"))
(flowchart-openlink (p "NodeA") " --- " (p "NodeB"))
(多重度付き関連_has_a (p "ClassA") " \"" (p "多重度") "\""
                " -- "
                "\"" (p "多重度") "\" " (p "ClassB") " : " (p "label"))

